name: Docker Build, Push, and Deploy

on:
  push:
    branches:
      - develop  # Триггер на пуше в ветку develop
      - main     # Триггер на пуше в ветку main

jobs:
  build:
    runs-on: self-hosted
    if: github.ref == 'refs/heads/develop'  # Запускать только для ветки develop

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/kursach:latest .

  push:
    runs-on: self-hosted
    needs: build  # Зависит от задачи build
    if: github.ref == 'refs/heads/develop'  # Запускать только для ветки develop

    steps:
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Push Docker image to DockerHub
      run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/kursach:latest

  deploy:
    runs-on: self-hosted
    needs: push  # Зависит от задачи push
    if: github.ref == 'refs/heads/main'  # Запускать только для ветки main

    steps:
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Deploy to server
      run: |
        $dockerUsername = "${{ secrets.DOCKER_HUB_USERNAME }}"
        $imageName = "$dockerUsername/kursach:latest"
        $containerName = "kursach"
    
        # Pull the latest Docker image
        docker pull $imageName
    
        # Stop and remove the existing container if it exists
        if (docker ps -a --filter "name=$containerName" --format '{{.Names}}' | Select-String -Pattern $containerName) {
            docker stop $containerName
            docker rm $containerName
        }
    
        # Run the new container
        docker run -d -p 80:80 --name $containerName $imageName

    - name: Clean up unused Docker images
      run: docker image prune -a -f
